//Ricardo Lima 2565510
//Geisily Varga 2478404;
//Raí I. Morato 2623420;

package br.com.banco.visao;
import javax.swing.JOptionPane;

import br.com.banco.controle.GerenciadorDeContas;
import br.com.banco.modelo.ContaBancaria;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Ricardo
 */
public class FormPix extends javax.swing.JFrame {

    private FormConta telaPrincipal;
    
    /**
     * Creates new form FormPix
     */

    public FormPix() {
        initComponents();
    }
    
    public FormPix(FormConta telaPrincipal) {
        this.telaPrincipal = telaPrincipal;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rtPix = new javax.swing.JLabel();
        rtNumeroConta = new javax.swing.JLabel();
        rtValor = new javax.swing.JLabel();
        cxNumeroConta = new javax.swing.JTextField();
        cxValor = new javax.swing.JTextField();
        btTransferir = new javax.swing.JButton();
        btLimpar = new javax.swing.JButton();
        btSair = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rtPix.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        rtPix.setText("Área Pix");

        rtNumeroConta.setText("Número da Conta");

        rtValor.setText("Valor");

        cxValor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cxValorActionPerformed(evt);
            }
        });

        btTransferir.setText("Transferir");
        btTransferir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btTransferirActionPerformed(evt);
            }
        });

        btLimpar.setText("Limpar");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        btSair.setText("Sair");
        btSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 119, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rtNumeroConta)
                    .addComponent(rtValor)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btTransferir)
                        .addGap(18, 18, 18)
                        .addComponent(btLimpar, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                    .addComponent(cxNumeroConta)
                    .addComponent(cxValor))
                .addGap(101, 101, 101))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(rtPix)
                        .addGap(156, 156, 156))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btSair)
                        .addGap(25, 25, 25))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(rtPix)
                .addGap(18, 18, 18)
                .addComponent(rtNumeroConta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cxNumeroConta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rtValor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cxValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btTransferir)
                    .addComponent(btLimpar))
                .addGap(30, 30, 30)
                .addComponent(btSair)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cxValorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cxValorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cxValorActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        limpar();
    }//GEN-LAST:event_btLimparActionPerformed

    private void btSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSairActionPerformed
        sair();
    }//GEN-LAST:event_btSairActionPerformed

    private void btTransferirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btTransferirActionPerformed
        String numeroContaDestino = cxNumeroConta.getText().trim();
        String valorStr = cxValor.getText().trim();

        if (numeroContaDestino.isEmpty() || valorStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha todos os campos!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            double valor = Double.parseDouble(valorStr);
            if (valor <= 0) {
                JOptionPane.showMessageDialog(this, "O valor da transferência deve ser maior que zero.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            String numeroContaOrigem = JOptionPane.showInputDialog(this, "Informe o número da sua conta:");

            if (numeroContaOrigem == null || numeroContaOrigem.trim().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Operação cancelada.", "Cancelado", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            numeroContaOrigem = numeroContaOrigem.trim();

            // Verificar se a conta origem existe
            ContaBancaria contaOrigem = GerenciadorDeContas.buscarContaPorNumero(numeroContaOrigem);
            if (contaOrigem == null) {
                JOptionPane.showMessageDialog(this, "Conta de origem não encontrada.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar se a conta destino existe
            ContaBancaria contaDestino = GerenciadorDeContas.buscarContaPorNumero(numeroContaDestino);
            if (contaDestino == null) {
                JOptionPane.showMessageDialog(this, "Conta de destino não encontrada.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar se não está transferindo para a mesma conta
            if (numeroContaOrigem.equals(numeroContaDestino)) {
                JOptionPane.showMessageDialog(this, "Não é possível transferir para a mesma conta.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Verificar se há saldo suficiente
            if (!GerenciadorDeContas.temSaldoSuficiente(numeroContaOrigem, contaOrigem.getAgencia(), valor)) {
                JOptionPane.showMessageDialog(this, 
                    "Saldo insuficiente na conta de origem.\nSaldo atual: R$ " + String.format("%.2f", contaOrigem.getSaldo()), 
                    "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }

            boolean sucesso = GerenciadorDeContas.transferirPix(numeroContaOrigem, numeroContaDestino, valor);

            if (sucesso) {
                // Atualizar a tela principal se a conta origem for a mesma da tela principal
                if (telaPrincipal != null && telaPrincipal.getConta() != null) {
                    String contaPrincipal = telaPrincipal.getConta().getNumeroConta();
                    if (numeroContaOrigem.equals(contaPrincipal)) {
                        telaPrincipal.atualizarSaldo();
                    }
                }
                
                JOptionPane.showMessageDialog(this, 
                    "PIX realizado com sucesso!\n" +
                    "Valor transferido: R$ " + String.format("%.2f", valor) + "\n" +
                    "De: " + contaOrigem.getNumeroConta() + " (" + contaOrigem.getTitular() + ")\n" +
                    "Para: " + contaDestino.getNumeroConta() + " (" + contaDestino.getTitular() + ")", 
                    "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Erro na transferência. Verifique os dados e saldo disponível.", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Digite um valor válido para transferência.", "Erro", JOptionPane.ERROR_MESSAGE);
        }

        limpar();
    }//GEN-LAST:event_btTransferirActionPerformed
 
    public void sair(){
        int resp = JOptionPane.showConfirmDialog(
            null,
            "Deseja realmente sair?",
            "Confirmação de Saída",
            JOptionPane.YES_NO_OPTION
        );
        if(resp == 0){
            //System.exit(0);
            dispose();
        }
    }
    
    public void limpar(){
        cxNumeroConta.setText("");
        cxValor.setText("");
        cxNumeroConta.requestFocus();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPix.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPix.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPix.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPix.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPix().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btSair;
    private javax.swing.JButton btTransferir;
    private javax.swing.JTextField cxNumeroConta;
    private javax.swing.JTextField cxValor;
    private javax.swing.JLabel rtNumeroConta;
    private javax.swing.JLabel rtPix;
    private javax.swing.JLabel rtValor;
    // End of variables declaration//GEN-END:variables
}
